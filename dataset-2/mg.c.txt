static void bubble( double ten[M][2], int j1[M][2], int j2[M][2],
		    int j3[M][2], int m, int ind );
	    u[l][k] 
		u[l][k][j] 
	    v[k][j] 
	    r[l][k] 
		r[l][k][j] 
		r1[i1] 
		    + r[i3-1][i2][i1] + r[i3+1][i2][i1];
		r2[i1] 
		    + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
		u[i3][i2][i1] 
		    + c[0] * r[i3][i2][i1]
		    + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
		u1[i1] 
		       + u[i3-1][i2][i1] + u[i3+1][i2][i1];
		u2[i1] 
		       + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
		r[i3][i2][i1] 
		    - a[0] * u[i3][i2][i1]
		x1[i1] 
		    + r[i3][i2+1][i1] + r[i3+2][i2+1][i1];
		y1[i1] 
		    + r[i3][i2+2][i1] + r[i3+2][i2+2][i1];
		y2 
		    + r[i3][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
		x2 
		    + r[i3][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
		s[j3][j2][j1] 
		    0.5 * r[i3+1][i2+1][i1+1]
		    + 0.25 * ( r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
		    z1[i1] 
		    z2[i1] 
		    z3[i1] 
		    u[2*i3][2*i2][2*i1] 
			+z[i3][i2][i1];
		    u[2*i3][2*i2][2*i1+1] 
			+0.5*(z[i3][i2][i1+1]+z[i3][i2][i1]);
		    u[2*i3][2*i2+1][2*i1] 
		    u[2*i3][2*i2+1][2*i1+1] 
		    u[2*i3+1][2*i2][2*i1] 
		    u[2*i3+1][2*i2][2*i1+1] 
		    u[2*i3+1][2*i2+1][2*i1] 
		    u[2*i3+1][2*i2+1][2*i1+1] 
		    u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] 
			u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
			+z[i3-1][i2-1][i1-1];
		    u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] 
			u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
			+0.5*(z[i3-1][i2-1][i1]+z[i3-1][i2-1][i1-1]);
		    u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] 
			u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
			+0.5*(z[i3-1][i2][i1-1]+z[i3-1][i2-1][i1-1]);
		    u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] 
			u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
			+0.25*(z[i3-1][i2][i1]+z[i3-1][i2-1][i1]
			       +z[i3-1][i2][i1-1]+z[i3-1][i2-1][i1-1]);
		    u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] 
			u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
			+0.5*(z[i3][i2-1][i1-1]+z[i3-1][i2-1][i1-1]);
		    u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] 
			u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
			+0.25*(z[i3][i2-1][i1]+z[i3][i2-1][i1-1]
			       +z[i3-1][i2-1][i1]+z[i3-1][i2-1][i1-1]);
		    u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] 
			u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
			+0.25*(z[i3][i2][i1-1]+z[i3][i2-1][i1-1]
			       +z[i3-1][i2][i1-1]+z[i3-1][i2-1][i1-1]);
		    u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] 
			u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
			+0.125*(z[i3][i2][i1]+z[i3][i2-1][i1]
				+z[i3][i2][i1-1]+z[i3][i2-1][i1-1]
				+z[i3-1][i2][i1]+z[i3-1][i2-1][i1]
				+z[i3-1][i2][i1-1]+z[i3-1][i2-1][i1-1]);
		s 
		a 
	    u[i3][i2][n1-1] 
	    u[i3][i2][0] 
	    u[i3][n2-1][i1] 
	    u[i3][0][i1] 
	    u[n3-1][i2][i1] 
	    u[0][i2][i1] 
    double ten[MM][2], best;
    int i, j1[MM][2], j2[MM][2], j3[MM][2];
    int jg[4][MM][2];
            vranlc( d1, &xx, A, &(z[i3][i2][0]));
	ten[i][1] 
	j1[i][1] 
	j2[i][1] 
	j3[i][1] 
	ten[i][0] 
	j1[i][0] 
	j2[i][0] 
	j3[i][0] 
		if ( z[i3][i2][i1] > ten[0][1] ) {
		    ten[0][1] 
		    j1[0][1] 
		    j2[0][1] 
		    j3[0][1] 
		if ( z[i3][i2][i1] < ten[0][0] ) {
		    ten[0][0] 
		    j1[0][0] 
		    j2[0][0] 
		    j3[0][0] 
	best 
	if (best 
            jg[0][i][1] 
            jg[1][i][1] 
            jg[2][i][1] 
            jg[3][i][1] 
            jg[0][i][1] 
            jg[1][i][1] 
            jg[2][i][1] 
            jg[3][i][1] 
	ten[i][1] 
	best 
	if (best 
            jg[0][i][0] 
            jg[1][i][0] 
            jg[2][i][0] 
            jg[3][i][0] 
            jg[0][i][0] 
            jg[1][i][0] 
            jg[2][i][0] 
            jg[3][i][0] 
	ten[i][0] 
	printf(" (%3d,%3d,%3d)", jg[1][i][0], jg[2][i][0], jg[3][i][0]);
	printf(" (%3d,%3d,%3d)", jg[1][i][1], jg[2][i][1], jg[3][i][1]);
	printf(" %15.8e", ten[i][0]);
	printf(" %4d", jg[0][i][0]);
	printf(" %15.8e", ten[i][1]);
	printf(" %4d", jg[0][i][1]);
		z[i3][i2][i1] 
	z[j3[i][0]][j2[i][0]][j1[i][0]] 
	z[j3[i][1]][j2[i][1]][j1[i][1]] 
		printf("%6.3f", z[i3][i2][i1]);
static void bubble( double ten[M][2], int j1[M][2], int j2[M][2],
		    int j3[M][2], int m, int ind ) {
            if ( ten[i][ind] > ten[i+1][ind] ) {
		temp 
		ten[i+1][ind] 
		ten[i][ind] 
		j_temp 
		j1[i+1][ind] 
		j1[i][ind] 
		j_temp 
		j2[i+1][ind] 
		j2[i][ind] 
		j_temp 
		j3[i+1][ind] 
		j3[i][ind] 
            if ( ten[i][ind] < ten[i+1][ind] ) {
		temp 
		ten[i+1][ind] 
		ten[i][ind] 
		j_temp 
		j1[i+1][ind] 
		j1[i][ind] 
		j_temp 
		j2[i+1][ind] 
		j2[i][ind] 
		j_temp 
		j3[i+1][ind] 
		j3[i][ind] 
		z[i3][i2][i1] 
